{"version":3,"sources":["components/sequenceForm.js","components/savedSequences.js","App.js","reportWebVitals.js","index.js"],"names":["SequenceForm","onNewSequence","useState","sequence","setSequence","Form","Group","controlId","FormControl","type","name","placeholder","value","onChange","e","target","required","Button","onClick","a","newSequence","fetch","method","headers","body","JSON","stringify","ok","console","log","setTimeout","window","location","reload","Sequences","sequences","Table","striped","bordered","hover","map","time","search_string","start_pos","end_pos","App","setSequences","useEffect","then","response","json","data","className","Container","Row","Col","sm","currentSequences","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mSAIaA,EAAe,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACbC,mBAAS,IADI,mBACtCC,EADsC,KAC5BC,EAD4B,KAE7C,OACI,eAACC,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,oBAAtB,SACI,cAACC,EAAA,EAAD,CACIC,KAAK,OACLC,KAAK,WACLC,YAAY,WACZC,MAAOT,EACPU,SAAU,SAAAC,GAAC,OAAIV,EAAYU,EAAEC,OAAOH,QACpCI,UAAQ,MAGhB,cAACX,EAAA,EAAKC,MAAN,UACI,cAACW,EAAA,EAAD,CACIC,QAAO,sBAAE,4BAAAC,EAAA,6DACCC,EAAc,CAACjB,YADhB,SAEkBkB,MAAM,sBAAuB,CAChDC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUN,KAPpB,cAUQO,KACTC,QAAQC,IAAI,oBACZ5B,EAAcE,GACdC,EAAY,IACZ0B,YACI,kBAAMC,OAAOC,SAASC,WACtB,MAhBH,2CADb,sBAwBJ,cAAC5B,EAAA,EAAKC,MAAN,UACoB,cAACW,EAAA,EAAD,CACZC,QAAO,sBAAE,sBAAAC,EAAA,sEACkBE,MAAM,sBAAuB,CAChDC,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAJnB,cAQQI,KACTC,QAAQC,IAAI,oBACZE,OAAOC,SAASC,UAVf,2CADG,mC,QCzCnBC,EAAY,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAC1B,OACI,eAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACE,gCACF,+BACE,8CACA,4CACA,+CACA,gDACA,mDAGA,gCACDJ,EAAUK,KAAI,SAAArC,GACb,OACF,+BACE,6BAAKA,EAASsC,OACd,6BAAKtC,EAASO,OACd,6BAAKP,EAASuC,gBACd,6BAAKvC,EAASwC,YACd,6BAAKxC,EAASyC,sB,wBCqBPC,MArCf,WAAgB,IAAD,EACuB3C,mBAAS,IADhC,mBACJiC,EADI,KACOW,EADP,KAWX,OARAC,qBAAU,WACN1B,MAAM,oBAAoB2B,MAAK,SAAAC,GAAQ,OACnCA,EAASC,OAAOF,MAAK,SAAAG,GACjBL,EAAaK,EAAKhB,mBAG3B,IAGC,qBAAKiB,UAAU,MAAf,SACI,wBAAQA,UAAU,aAAlB,SACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAM,EAAX,SACI,qBAAKJ,UAAU,aAAf,SACA,cAAC,EAAD,CACInD,cAAe,SAAAE,GAAQ,OACnB2C,GAAa,SAAAW,GAAgB,OAAKtD,GAAL,mBAAkBsD,cAK3D,cAACF,EAAA,EAAD,CAAKC,GAAM,EAAX,SACI,cAAC,EAAD,CAAWrB,UAAWA,gBCrBnCuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAMjDX,M","file":"static/js/main.620a0330.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {Form, Button, FormControl} from 'react-bootstrap';\n\n\nexport const SequenceForm = ({onNewSequence}) => {\n    const [sequence, setSequence] = useState(\"\");\n    return (\n        <Form>\n            <Form.Group controlId=\"formBasicSequence\">\n                <FormControl\n                    type='text'\n                    name='Sequence'\n                    placeholder=\"Sequence\"\n                    value={sequence}\n                    onChange={e => setSequence(e.target.value)}\n                    required\n                />\n            </Form.Group>\n            <Form.Group>\n                <Button\n                    onClick={async () => {\n                        const newSequence = {sequence};\n                        const response = await fetch(\"/api/search_protein\", {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify(newSequence)\n                        });\n\n                        if (response.ok) {\n                            console.log(\"response worked!\");\n                            onNewSequence(sequence);\n                            setSequence(\"\");\n                            setTimeout(\n                                () => window.location.reload(),\n                                10000\n                            );\n                        }\n                    }}>\n                    Submit\n                </Button>\n            </Form.Group>\n            <Form.Group>\n                                <Button\n                    onClick={async () => {\n                        const response = await fetch(\"/api/clear_searches\", {\n                            method: \"GET\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                        });\n\n                        if (response.ok) {\n                            console.log(\"response worked!\");\n                            window.location.reload()\n                        }\n\n                    }}>\n                    Clear Searches </Button>\n            </Form.Group>\n        </Form>\n    );\n};","import React from \"react\";\nimport {Container, Table} from \"react-bootstrap\";\n\nexport const Sequences = ({ sequences }) => {\n  return (\n      <Table striped bordered hover>\n        <thead>\n      <tr>\n        <th>Search Time </th>\n        <th>Definition</th>\n        <th>Search String</th>\n        <th>Start Position</th>\n        <th>End Position</th>\n      </tr>\n    </thead>\n        <tbody>\n      {sequences.map(sequence => {\n        return (\n      <tr>\n        <td>{sequence.time}</td>\n        <td>{sequence.name}</td>\n        <td>{sequence.search_string}</td>\n        <td>{sequence.start_pos}</td>\n        <td>{sequence.end_pos}</td>\n      </tr>\n        );\n      })}\n      </tbody>\n    </Table>\n  );\n};","import './App.css';\nimport React, {Component, useState, useEffect} from 'react';\nimport {SequenceForm} from \"./components/sequenceForm\";\nimport {Sequences} from './components/savedSequences';\nimport {Col, Row, Container} from \"react-bootstrap\";\n\n\nfunction App() {\n    const [sequences, setSequences] = useState([]);\n\n    useEffect(() => {\n        fetch(\"api/get_proteins\").then(response =>\n            response.json().then(data => {\n                setSequences(data.sequences);\n            })\n        );\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Container>\n                    <Row>\n                        <Col sm = {5}>\n                            <div className=\"search_box\">\n                            <SequenceForm\n                                onNewSequence={sequence =>\n                                    setSequences(currentSequences => [sequence, ...currentSequences])\n                                }\n                            />\n                            </div>\n                        </Col>\n                        <Col sm = {7}>\n                            <Sequences sequences={sequences}/>\n                        </Col>\n                    </Row>\n                </Container>\n            </header>\n\n        </div>\n    );\n}\n\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}